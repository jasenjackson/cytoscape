% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layouts.R
\name{layout}
\alias{layout}
\alias{layout.cytoscape}
\title{Layout}
\usage{
layout(
  cytoscape,
  name = NULL,
  fit = TRUE,
  padding = 30,
  boundingBox = NULL,
  avoidOverlap = TRUE,
  avoidOverlapPadding = 10,
  nodeDimensionsIncludeLabels = FALSE,
  spacingFactor = NULL,
  condense = FALSE,
  rows = NULL,
  cols = NULL,
  position = NULL,
  sort = NULL,
  animate = FALSE,
  animationDuration = 500,
  animationEasing = NULL,
  animateFilter = NULL,
  ready = NULL,
  stop = NULL,
  transform = NULL,
  ...
)

\method{layout}{cytoscape}(
  cytoscape,
  name = NULL,
  fit = TRUE,
  padding = 30,
  boundingBox = NULL,
  avoidOverlap = TRUE,
  avoidOverlapPadding = 10,
  nodeDimensionsIncludeLabels = FALSE,
  spacingFactor = NULL,
  condense = FALSE,
  rows = NULL,
  cols = NULL,
  position = NULL,
  sort = NULL,
  animate = FALSE,
  animationDuration = 500,
  animationEasing = NULL,
  animateFilter = NULL,
  ready = NULL,
  stop = NULL,
  transform = NULL,
  ...
)
}
\arguments{
\item{cytoscape}{object}

\item{name}{character option, must b one of:
\itemize{
  \item{null}
  \item{random}
  \item{preset}
  \item{grid}
  \item{circle}
  \item{concentric}
  \item{breadthfirst}
  \item{cose}
}}

\item{fit}{boolean whether to fit the viewport to the graph}

\item{padding}{integer pixels padding used on fit}

\item{boundingBox}{= undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }}

\item{avoidOverlap}{boolean prevents node overlap, may overflow boundingBox if not enough space}

\item{avoidOverlapPadding}{integer pixels extra spacing around nodes when avoidOverlap = true}

\item{nodeDimensionsIncludeLabels}{= false, // Excludes the label when calculating node bounding boxes for the layout algorithm}

\item{spacingFactor}{= undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up}

\item{condense}{boolean, uses all available space on false, uses minimal space on true}

\item{rows}{integer force num of rows in the grid}

\item{cols}{integer force num of columns in the grid}

\item{position}{js function( node ){}, // returns { row, col } for element}

\item{sort}{js a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }}

\item{animate}{boolean whether to transition the node positions}

\item{animationDuration}{integer duration of animation in ms if enabled}

\item{animationEasing}{= undefined, // easing of animation if enabled}

\item{animateFilter}{= function ( node, i ){ return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts}

\item{ready}{= undefined, // callback on layoutready}

\item{stop}{= undefined, // callback on layoutstop}

\item{transform}{= 'function (node, position ){ return position; }'}

\item{...}{additional parameters passed to the layout object}
}
\value{
cytoscape object
}
\description{
Set network layout options
}
\examples{

df <- cytoscape::comtrade

nodes <- data.frame(id = unique(c(df$reporter, df$partner)))
edges <- df \%>\%
  dplyr::select(source = reporter,
                target = partner) \%>\%
  dplyr::mutate(id = paste(source, '_', target))

cytoscape(nodes = nodes, edges = edges) \%>\%
  cytoscape::layout(4)

}
\concept{layout}
